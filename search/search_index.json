{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection Motivation Projectile motion, while seemingly simple, offers a rich playground for exploring fundamental principles of physics. The problem is straightforward: analyze how the range of a projectile depends on its angle of projection. Yet, beneath this simplicity lies a complex and versatile framework. The equations governing projectile motion involve both linear and quadratic relationships, making them accessible yet deeply insightful. What makes this topic particularly compelling is the number of free parameters involved in these equations, such as initial velocity, gravitational acceleration, and launch height. These parameters give rise to a diverse set of solutions that can describe a wide array of real-world phenomena, from the arc of a soccer ball to the trajectory of a rocket. Theoretical Foundation Derive the governing equations of projectile motion from fundamental principles. Present the general form of the motion by solving basic differential equations. Highlight how variations in initial conditions lead to a family of solutions. Analysis of the Range Investigate how the horizontal range depends on the angle of projection. Discuss how changes in parameters such as initial velocity and gravitational acceleration affect the outcome. Practical Applications Explore how this model applies to real-world scenarios, including uneven terrain and air resistance. Reflect on how various modifications allow the model to describe more complex trajectories. Implementation Develop a computational tool or algorithm to simulate projectile motion. Visualize the range as a function of the angle of projection for different sets of initial conditions. Deliverables A Markdown document including a Python script or notebook implementing the simulations. A detailed explanation of the family of solutions derived from the governing equations. Graphs illustrating the relationship between range and angle, emphasizing how different parameters influence the curve. A discussion about the limitations of the idealized model and possible improvements by considering realistic factors like air drag or wind. Hints and Resources Start from the fundamental laws of motion to build your solution step-by-step. Use numerical methods or simulations to analyze complex cases beyond analytical scope. Connect this model to practical fields such as sports physics, engineering, and astrophysics. This assignment encourages a deep understanding of projectile motion while showcasing its versatility and real-world applicability. Solution Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Projectile motion is governed by Newton's laws. The equations of motion for a projectile launched at an angle \\( \\theta \\) with initial velocity \\( v_0 \\) are derived from kinematic equations: Differential Equation of Motion The motion of a projectile is governed by the second-order differential equations: $$ \\frac{d^2x}{dt^2} = 0, \\quad \\frac{d^2y}{dt^2} = -g $$ Integrating once: $$ \\frac{dx}{dt} = v_0 \\cos(\\theta), \\quad \\frac{dy}{dt} = v_0 \\sin(\\theta) - g t $$ Integrating again: $$ x(t) = v_0 \\cos(\\theta) t, \\quad y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$ Equations of Motion Horizontal displacement: $$ x(t) = v_0 \\cos(\\theta) t $$ Vertical displacement: $$ y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$ To find the range \\( R \\) , we determine the time of flight \\( T_f \\) : $$ T_f = \\frac{2 v_0 \\sin(\\theta)}{g} $$ Substituting into the horizontal displacement: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ 2. Analysis of the Range The maximum range occurs at \\( \\theta = 45^\\circ \\) , yielding: $$ R_{\\max} = \\frac{v_0^2}{g} $$ Why is \\( 45^\\circ \\) the optimal angle? The range formula for projectile motion (neglecting air resistance) is: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ The sine function reaches its maximum value when \\( 2\\theta = 90^\\circ \\) , meaning: $$ \\theta = 45^\\circ $$ At this angle, the horizontal velocity and vertical velocity are balanced, maximizing the distance traveled. Representations: Gravity Influence: Lower gravity increases range (e.g., Moon vs. Earth). Velocity Impact: Higher velocity increases range quadratically. 3. Practical Applications Projectile motion has a wide range of practical applications across various fields. Understanding the principles behind projectile trajectories allows for better planning, optimization, and decision-making. Here are some key areas where these concepts are applied: 3.1 Sports In sports such as football, basketball, and golf, the trajectory of balls is often analyzed to improve player performance and strategy. Understanding how different angles and speeds affect the distance and trajectory of a ball can help athletes optimize their throws, kicks, and swings. Coaches and players can use this information to improve accuracy and maximize the effectiveness of their plays. Football : The trajectory of a football when kicked for a field goal or a punt is a classic example of projectile motion. The optimal launch angle and velocity for achieving maximum distance and accuracy are essential. Golf : In golf, golfers use their knowledge of projectile motion to determine the ideal angle for hitting the ball to achieve maximum distance and ensure it lands where they want. Basketball : The angle at which a basketball is thrown affects the likelihood of it going through the hoop. Understanding projectile motion helps players optimize their shooting angles and force for better accuracy. 3.2 Engineering Projectile motion principles are also applied in engineering, especially in the design and optimization of systems involving the launch or movement of objects. Engineers working in fields like aerospace, mechanical, and civil engineering must understand how objects travel through air or space. Ballistics Engineering : Ballistics engineers use these principles to design and test the trajectories of projectiles such as missiles and bombs. Understanding the physics behind projectile motion ensures the effectiveness and precision of weapons. Aerospace Engineering : The principles of projectile motion are also fundamental in the design of spacecraft and satellites, particularly when launching probes into orbit. These calculations help engineers predict the trajectory of a spacecraft during its journey, ensuring accurate positioning and minimizing fuel consumption. 3.3 Astrophysics In astrophysics, the study of projectile motion is crucial for calculating the orbits of planets, moons, satellites, and other celestial bodies. Understanding the motion of objects in space allows scientists to predict their movements and plan missions to explore distant regions. Satellite Orbits : The trajectories of satellites around Earth or other planets are determined by applying the principles of projectile motion. Engineers and astrophysicists use these principles to ensure satellites stay in orbit and fulfill their intended functions. Space Probes : Space agencies like NASA rely on precise projectile motion calculations when launching probes to explore planets, moons, and asteroids. Accurate predictions of trajectory and range are essential to ensure that these probes reach their targets, such as Mars or Jupiter's moons, without missing their mark. 4. Implementation The following Python script implements additional simulations: You can run the simulation in Google Colab by clicking the link below: \u25b6 Run in Google Colab import numpy as np import matplotlib.pyplot as plt from matplotlib.animation import FuncAnimation from IPython.display import HTML def projectile_trajectory(v0, angle, g=9.81, h=0, dt=0.05): angle_rad = np.radians(angle) vx = v0 * np.cos(angle_rad) vy = v0 * np.sin(angle_rad) x, y = [0], [h] t = 0 while y[-1] >= 0: t += dt x.append(vx * t) y.append(h + vy * t - 0.5 * g * t**2) return np.array(x), np.array(y) # 1. Three different velocities on the same plot plt.figure(figsize=(8,5)) plt.ylim(0, 60) for v0 in [10, 20, 30]: x, y = projectile_trajectory(v0, 45) plt.plot(x, y, label=f'v0 = {v0} m/s') plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion with Different Velocities\") plt.legend() plt.grid() plt.show() # 2. Same initial conditions on three different planets plt.figure(figsize=(8,5)) plt.ylim(0, 60) planets = {\"Earth\": 9.81, \"Moon\": 1.62, \"Jupiter\": 24.79} for planet, g in planets.items(): x, y = projectile_trajectory(20, 45, g) plt.plot(x, y, label=planet) plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion on Different Planets\") plt.legend() plt.grid() plt.show() # 3. Different heights plt.figure(figsize=(8,5)) plt.ylim(0, 60) for h in [0, 10, 20]: x, y = projectile_trajectory(20, 45, 9.81, h) plt.plot(x, y, label=f'Height = {h}m') plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion with Different Initial Heights\") plt.legend() plt.grid() plt.show() # 4. Air resistance vs. no air resistance plt.figure(figsize=(8,5)) plt.ylim(0, 60) def projectile_with_drag(v0, angle, g=9.81, h=0, dt=0.05, drag_coeff=0.1): angle_rad = np.radians(angle) vx, vy = v0 * np.cos(angle_rad), v0 * np.sin(angle_rad) x, y = [0], [h] t = 0 while y[-1] >= 0: t += dt vx -= drag_coeff * vx * dt vy -= (g + drag_coeff * vy) * dt x.append(x[-1] + vx * dt) y.append(y[-1] + vy * dt) return np.array(x), np.array(y) x_no_drag, y_no_drag = projectile_trajectory(20, 45) x_drag, y_drag = projectile_with_drag(20, 45) plt.plot(x_no_drag, y_no_drag, label=\"No Air Resistance\") plt.plot(x_drag, y_drag, linestyle='dashed', label=\"With Air Resistance\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion With and Without Air Resistance\") plt.legend() plt.grid() plt.show() Different Velocities: Different Planets: Different Initial Heights: Difference between with and without air resistance: 5. Limitations and Future Work While the idealized model of projectile motion offers significant insight into the physics of motion under uniform gravity, it inherently excludes numerous real-world influences. To advance the fidelity and applicability of the model, several extensions are proposed. Below is a detailed analysis of the model's key limitations and potential enhancements. 5.1 Simplified Assumptions in the Classical Model The classical projectile motion equations are derived under idealized conditions, assuming: No Air Resistance : The model neglects drag forces, which in reality oppose motion and reduce both range and maximum height. Uniform Terrain : A flat surface is assumed, overlooking how uneven terrain or varying elevations affect both launch and landing dynamics. Constant Gravitational Field : Gravity is considered a constant (typically \\(9.81 \\, m/s^2\\) ), although it slightly varies with altitude and geographic location. These simplifications make the model analytically tractable but limit its realism, especially for high-speed or long-range projectiles. \ud83d\udd2c Simulation: Ideal Projectile Motion The Python code below simulates projectile motion under these simplified assumptions. It compares three different launch angles (30\u00b0, 45\u00b0, 60\u00b0) with a fixed initial velocity, assuming: No drag Flat ground Constant gravitational acceleration \u25b6 Run in Google Colab import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # gravity (m/s^2) angles = [30, 45, 60] # degrees v0 = 25 # initial velocity (m/s) # Function to calculate ideal projectile motion def projectile_ideal(v0, angle_deg): angle_rad = np.radians(angle_deg) t_flight = 2 * v0 * np.sin(angle_rad) / g t = np.linspace(0, t_flight, num=200) x = v0 * np.cos(angle_rad) * t y = v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 return x, y # Plotting plt.figure(figsize=(10, 5)) for angle in angles: x, y = projectile_ideal(v0, angle) plt.plot(x, y, label=f\"{angle}\u00b0\") plt.title(\"Idealized Projectile Motion (No Air Resistance, Flat Terrain, Constant Gravity)\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.legend(title=\"Launch Angle\") plt.grid(True) plt.tight_layout() plt.show() This visualization highlights the elegant parabolic nature of projectile trajectories in an idealized setting, laying the groundwork for deeper models that include real-world complexity. 5.2 Modeling Air Resistance and Drag Forces One of the most significant oversights in the classical model is the exclusion of air resistance . Realistic modeling involves solving differential equations incorporating a drag term: \\[ F_d = \\frac{1}{2} C_d \\rho A v^2 \\] Where: - \\(C_d\\) = Drag coefficient (depends on shape and surface) - \\(\\rho\\) = Air density - \\(A\\) = Cross-sectional area - \\(v\\) = Velocity Future Work: - Implement the drag equation into motion equations. - Analyze how the inclusion of drag alters trajectory curvature and range. \ud83d\udd2c Graphical Comparison Using Python Below is a sample Python snippet that compares ideal vs drag-influenced projectile motion: You can run the simulation in Google Colab by clicking the link below: \u25b6 Run in Google Colab import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Constants g = 9.81 # gravity (m/s^2) v0 = 50 # initial velocity (m/s) theta = 45 # launch angle (degrees) Cd = 0.47 # drag coefficient (sphere) rho = 1.225 # air density (kg/m^3) A = 0.01 # cross-sectional area (m^2) m = 0.145 # mass (kg) # Initial velocities vx0 = v0 * np.cos(np.radians(theta)) vy0 = v0 * np.sin(np.radians(theta)) # System of differential equations def drag_projectile(t, y): vx, vy, x, y_pos = y v = np.sqrt(vx**2 + vy**2) Fd = 0.5 * Cd * rho * A * v**2 ax = -Fd * vx / (m * v) ay = -g - (Fd * vy / (m * v)) return [ax, ay, vx, vy] # Event to stop integration when projectile hits the ground def hit_ground(t, y): return y[3] # y-position hit_ground.terminal = True hit_ground.direction = -1 # Solve with air resistance sol = solve_ivp( drag_projectile, [0, 10], [vx0, vy0, 0, 0], events=hit_ground, max_step=0.01 ) x_drag, y_drag = sol.y[2], sol.y[3] # Ideal trajectory t = np.linspace(0, 2 * vy0 / g, 100) x_ideal = vx0 * t y_ideal = vy0 * t - 0.5 * g * t**2 # Plotting plt.figure(figsize=(10, 5)) plt.plot(x_ideal, y_ideal, label=\"No Drag (Ideal)\", linestyle=\"--\") plt.plot(x_drag, y_drag, label=\"With Air Drag\") plt.xlabel(\"Distance (m)\") plt.ylabel(\"Height (m)\") plt.title(\"Projectile Motion: Ideal vs With Air Resistance\") plt.legend() plt.grid(True) plt.tight_layout() plt.show() Conclusion: In conclusion, while the basic model offers a solid foundation for understanding projectile motion, future work should expand the model to account for a broader range of real-world factors. By incorporating air resistance, varying terrain, and other external forces, we can achieve more accurate simulations and predictions, ultimately enhancing applications in fields like aerospace, sports, and environmental science. Further Viewing For a quick and visual summary of projectile motion, watch this short video: \ud83c\udfa5 Physics Made Easy \u2013 Projectile Motion (YouTube)","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#motivation","text":"Projectile motion, while seemingly simple, offers a rich playground for exploring fundamental principles of physics. The problem is straightforward: analyze how the range of a projectile depends on its angle of projection. Yet, beneath this simplicity lies a complex and versatile framework. The equations governing projectile motion involve both linear and quadratic relationships, making them accessible yet deeply insightful. What makes this topic particularly compelling is the number of free parameters involved in these equations, such as initial velocity, gravitational acceleration, and launch height. These parameters give rise to a diverse set of solutions that can describe a wide array of real-world phenomena, from the arc of a soccer ball to the trajectory of a rocket.","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#theoretical-foundation","text":"Derive the governing equations of projectile motion from fundamental principles. Present the general form of the motion by solving basic differential equations. Highlight how variations in initial conditions lead to a family of solutions.","title":"Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#analysis-of-the-range","text":"Investigate how the horizontal range depends on the angle of projection. Discuss how changes in parameters such as initial velocity and gravitational acceleration affect the outcome.","title":"Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#practical-applications","text":"Explore how this model applies to real-world scenarios, including uneven terrain and air resistance. Reflect on how various modifications allow the model to describe more complex trajectories.","title":"Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#implementation","text":"Develop a computational tool or algorithm to simulate projectile motion. Visualize the range as a function of the angle of projection for different sets of initial conditions.","title":"Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#deliverables","text":"A Markdown document including a Python script or notebook implementing the simulations. A detailed explanation of the family of solutions derived from the governing equations. Graphs illustrating the relationship between range and angle, emphasizing how different parameters influence the curve. A discussion about the limitations of the idealized model and possible improvements by considering realistic factors like air drag or wind.","title":"Deliverables"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#hints-and-resources","text":"Start from the fundamental laws of motion to build your solution step-by-step. Use numerical methods or simulations to analyze complex cases beyond analytical scope. Connect this model to practical fields such as sports physics, engineering, and astrophysics. This assignment encourages a deep understanding of projectile motion while showcasing its versatility and real-world applicability.","title":"Hints and Resources"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#solution","text":"","title":"Solution"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection_1","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"Projectile motion is governed by Newton's laws. The equations of motion for a projectile launched at an angle \\( \\theta \\) with initial velocity \\( v_0 \\) are derived from kinematic equations:","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#differential-equation-of-motion","text":"The motion of a projectile is governed by the second-order differential equations: $$ \\frac{d^2x}{dt^2} = 0, \\quad \\frac{d^2y}{dt^2} = -g $$ Integrating once: $$ \\frac{dx}{dt} = v_0 \\cos(\\theta), \\quad \\frac{dy}{dt} = v_0 \\sin(\\theta) - g t $$ Integrating again: $$ x(t) = v_0 \\cos(\\theta) t, \\quad y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$","title":"Differential Equation of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#equations-of-motion","text":"Horizontal displacement: $$ x(t) = v_0 \\cos(\\theta) t $$ Vertical displacement: $$ y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$ To find the range \\( R \\) , we determine the time of flight \\( T_f \\) : $$ T_f = \\frac{2 v_0 \\sin(\\theta)}{g} $$ Substituting into the horizontal displacement: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$","title":"Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The maximum range occurs at \\( \\theta = 45^\\circ \\) , yielding: $$ R_{\\max} = \\frac{v_0^2}{g} $$ Why is \\( 45^\\circ \\) the optimal angle? The range formula for projectile motion (neglecting air resistance) is: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ The sine function reaches its maximum value when \\( 2\\theta = 90^\\circ \\) , meaning: $$ \\theta = 45^\\circ $$ At this angle, the horizontal velocity and vertical velocity are balanced, maximizing the distance traveled. Representations: Gravity Influence: Lower gravity increases range (e.g., Moon vs. Earth). Velocity Impact: Higher velocity increases range quadratically.","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Projectile motion has a wide range of practical applications across various fields. Understanding the principles behind projectile trajectories allows for better planning, optimization, and decision-making. Here are some key areas where these concepts are applied:","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#31-sports","text":"In sports such as football, basketball, and golf, the trajectory of balls is often analyzed to improve player performance and strategy. Understanding how different angles and speeds affect the distance and trajectory of a ball can help athletes optimize their throws, kicks, and swings. Coaches and players can use this information to improve accuracy and maximize the effectiveness of their plays. Football : The trajectory of a football when kicked for a field goal or a punt is a classic example of projectile motion. The optimal launch angle and velocity for achieving maximum distance and accuracy are essential. Golf : In golf, golfers use their knowledge of projectile motion to determine the ideal angle for hitting the ball to achieve maximum distance and ensure it lands where they want. Basketball : The angle at which a basketball is thrown affects the likelihood of it going through the hoop. Understanding projectile motion helps players optimize their shooting angles and force for better accuracy.","title":"3.1 Sports"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#32-engineering","text":"Projectile motion principles are also applied in engineering, especially in the design and optimization of systems involving the launch or movement of objects. Engineers working in fields like aerospace, mechanical, and civil engineering must understand how objects travel through air or space. Ballistics Engineering : Ballistics engineers use these principles to design and test the trajectories of projectiles such as missiles and bombs. Understanding the physics behind projectile motion ensures the effectiveness and precision of weapons. Aerospace Engineering : The principles of projectile motion are also fundamental in the design of spacecraft and satellites, particularly when launching probes into orbit. These calculations help engineers predict the trajectory of a spacecraft during its journey, ensuring accurate positioning and minimizing fuel consumption.","title":"3.2 Engineering"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#33-astrophysics","text":"In astrophysics, the study of projectile motion is crucial for calculating the orbits of planets, moons, satellites, and other celestial bodies. Understanding the motion of objects in space allows scientists to predict their movements and plan missions to explore distant regions. Satellite Orbits : The trajectories of satellites around Earth or other planets are determined by applying the principles of projectile motion. Engineers and astrophysicists use these principles to ensure satellites stay in orbit and fulfill their intended functions. Space Probes : Space agencies like NASA rely on precise projectile motion calculations when launching probes to explore planets, moons, and asteroids. Accurate predictions of trajectory and range are essential to ensure that these probes reach their targets, such as Mars or Jupiter's moons, without missing their mark.","title":"3.3 Astrophysics"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"The following Python script implements additional simulations: You can run the simulation in Google Colab by clicking the link below: \u25b6 Run in Google Colab import numpy as np import matplotlib.pyplot as plt from matplotlib.animation import FuncAnimation from IPython.display import HTML def projectile_trajectory(v0, angle, g=9.81, h=0, dt=0.05): angle_rad = np.radians(angle) vx = v0 * np.cos(angle_rad) vy = v0 * np.sin(angle_rad) x, y = [0], [h] t = 0 while y[-1] >= 0: t += dt x.append(vx * t) y.append(h + vy * t - 0.5 * g * t**2) return np.array(x), np.array(y) # 1. Three different velocities on the same plot plt.figure(figsize=(8,5)) plt.ylim(0, 60) for v0 in [10, 20, 30]: x, y = projectile_trajectory(v0, 45) plt.plot(x, y, label=f'v0 = {v0} m/s') plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion with Different Velocities\") plt.legend() plt.grid() plt.show() # 2. Same initial conditions on three different planets plt.figure(figsize=(8,5)) plt.ylim(0, 60) planets = {\"Earth\": 9.81, \"Moon\": 1.62, \"Jupiter\": 24.79} for planet, g in planets.items(): x, y = projectile_trajectory(20, 45, g) plt.plot(x, y, label=planet) plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion on Different Planets\") plt.legend() plt.grid() plt.show() # 3. Different heights plt.figure(figsize=(8,5)) plt.ylim(0, 60) for h in [0, 10, 20]: x, y = projectile_trajectory(20, 45, 9.81, h) plt.plot(x, y, label=f'Height = {h}m') plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion with Different Initial Heights\") plt.legend() plt.grid() plt.show() # 4. Air resistance vs. no air resistance plt.figure(figsize=(8,5)) plt.ylim(0, 60) def projectile_with_drag(v0, angle, g=9.81, h=0, dt=0.05, drag_coeff=0.1): angle_rad = np.radians(angle) vx, vy = v0 * np.cos(angle_rad), v0 * np.sin(angle_rad) x, y = [0], [h] t = 0 while y[-1] >= 0: t += dt vx -= drag_coeff * vx * dt vy -= (g + drag_coeff * vy) * dt x.append(x[-1] + vx * dt) y.append(y[-1] + vy * dt) return np.array(x), np.array(y) x_no_drag, y_no_drag = projectile_trajectory(20, 45) x_drag, y_drag = projectile_with_drag(20, 45) plt.plot(x_no_drag, y_no_drag, label=\"No Air Resistance\") plt.plot(x_drag, y_drag, linestyle='dashed', label=\"With Air Resistance\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion With and Without Air Resistance\") plt.legend() plt.grid() plt.show()","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#different-velocities","text":"","title":"Different Velocities:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#different-planets","text":"","title":"Different Planets:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#different-initial-heights","text":"","title":"Different Initial Heights:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#difference-between-with-and-without-air-resistance","text":"","title":"Difference between with and without air resistance:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-limitations-and-future-work","text":"While the idealized model of projectile motion offers significant insight into the physics of motion under uniform gravity, it inherently excludes numerous real-world influences. To advance the fidelity and applicability of the model, several extensions are proposed. Below is a detailed analysis of the model's key limitations and potential enhancements.","title":"5. Limitations and Future Work"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#51-simplified-assumptions-in-the-classical-model","text":"The classical projectile motion equations are derived under idealized conditions, assuming: No Air Resistance : The model neglects drag forces, which in reality oppose motion and reduce both range and maximum height. Uniform Terrain : A flat surface is assumed, overlooking how uneven terrain or varying elevations affect both launch and landing dynamics. Constant Gravitational Field : Gravity is considered a constant (typically \\(9.81 \\, m/s^2\\) ), although it slightly varies with altitude and geographic location. These simplifications make the model analytically tractable but limit its realism, especially for high-speed or long-range projectiles.","title":"5.1 Simplified Assumptions in the Classical Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#simulation-ideal-projectile-motion","text":"The Python code below simulates projectile motion under these simplified assumptions. It compares three different launch angles (30\u00b0, 45\u00b0, 60\u00b0) with a fixed initial velocity, assuming: No drag Flat ground Constant gravitational acceleration \u25b6 Run in Google Colab import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # gravity (m/s^2) angles = [30, 45, 60] # degrees v0 = 25 # initial velocity (m/s) # Function to calculate ideal projectile motion def projectile_ideal(v0, angle_deg): angle_rad = np.radians(angle_deg) t_flight = 2 * v0 * np.sin(angle_rad) / g t = np.linspace(0, t_flight, num=200) x = v0 * np.cos(angle_rad) * t y = v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 return x, y # Plotting plt.figure(figsize=(10, 5)) for angle in angles: x, y = projectile_ideal(v0, angle) plt.plot(x, y, label=f\"{angle}\u00b0\") plt.title(\"Idealized Projectile Motion (No Air Resistance, Flat Terrain, Constant Gravity)\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.legend(title=\"Launch Angle\") plt.grid(True) plt.tight_layout() plt.show() This visualization highlights the elegant parabolic nature of projectile trajectories in an idealized setting, laying the groundwork for deeper models that include real-world complexity.","title":"\ud83d\udd2c Simulation: Ideal Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#52-modeling-air-resistance-and-drag-forces","text":"One of the most significant oversights in the classical model is the exclusion of air resistance . Realistic modeling involves solving differential equations incorporating a drag term: \\[ F_d = \\frac{1}{2} C_d \\rho A v^2 \\] Where: - \\(C_d\\) = Drag coefficient (depends on shape and surface) - \\(\\rho\\) = Air density - \\(A\\) = Cross-sectional area - \\(v\\) = Velocity Future Work: - Implement the drag equation into motion equations. - Analyze how the inclusion of drag alters trajectory curvature and range.","title":"5.2 Modeling Air Resistance and Drag Forces"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#graphical-comparison-using-python","text":"Below is a sample Python snippet that compares ideal vs drag-influenced projectile motion: You can run the simulation in Google Colab by clicking the link below: \u25b6 Run in Google Colab import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Constants g = 9.81 # gravity (m/s^2) v0 = 50 # initial velocity (m/s) theta = 45 # launch angle (degrees) Cd = 0.47 # drag coefficient (sphere) rho = 1.225 # air density (kg/m^3) A = 0.01 # cross-sectional area (m^2) m = 0.145 # mass (kg) # Initial velocities vx0 = v0 * np.cos(np.radians(theta)) vy0 = v0 * np.sin(np.radians(theta)) # System of differential equations def drag_projectile(t, y): vx, vy, x, y_pos = y v = np.sqrt(vx**2 + vy**2) Fd = 0.5 * Cd * rho * A * v**2 ax = -Fd * vx / (m * v) ay = -g - (Fd * vy / (m * v)) return [ax, ay, vx, vy] # Event to stop integration when projectile hits the ground def hit_ground(t, y): return y[3] # y-position hit_ground.terminal = True hit_ground.direction = -1 # Solve with air resistance sol = solve_ivp( drag_projectile, [0, 10], [vx0, vy0, 0, 0], events=hit_ground, max_step=0.01 ) x_drag, y_drag = sol.y[2], sol.y[3] # Ideal trajectory t = np.linspace(0, 2 * vy0 / g, 100) x_ideal = vx0 * t y_ideal = vy0 * t - 0.5 * g * t**2 # Plotting plt.figure(figsize=(10, 5)) plt.plot(x_ideal, y_ideal, label=\"No Drag (Ideal)\", linestyle=\"--\") plt.plot(x_drag, y_drag, label=\"With Air Drag\") plt.xlabel(\"Distance (m)\") plt.ylabel(\"Height (m)\") plt.title(\"Projectile Motion: Ideal vs With Air Resistance\") plt.legend() plt.grid(True) plt.tight_layout() plt.show()","title":"\ud83d\udd2c Graphical Comparison Using Python"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"In conclusion, while the basic model offers a solid foundation for understanding projectile motion, future work should expand the model to account for a broader range of real-world factors. By incorporating air resistance, varying terrain, and other external forces, we can achieve more accurate simulations and predictions, ultimately enhancing applications in fields like aerospace, sports, and environmental science.","title":"Conclusion:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#further-viewing","text":"For a quick and visual summary of projectile motion, watch this short video: \ud83c\udfa5 Physics Made Easy \u2013 Projectile Motion (YouTube)","title":"Further Viewing"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2: Investigating the Dynamics of a Forced Damped Pendulum Motivation The forced damped pendulum is a classic example of a nonlinear dynamical system that exhibits a wide range of complex behaviors. These include simple harmonic motion, resonance, quasiperiodicity, and chaos. The system models real-world phenomena such as mechanical oscillations under periodic loading, electrical circuits with alternating current, and climate dynamics. Understanding the response of the pendulum to varying damping coefficients and external driving forces is crucial for designing stable and efficient engineering systems. This problem explores the physics underlying the forced damped pendulum and uses numerical simulations to uncover its intricate dynamical behavior. 1. Theoretical Foundation The motion of a forced damped pendulum is governed by the following second-order nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Where: $$ \\theta(t) $$ is the angular displacement as a function of time $$ \\gamma $$ is the damping coefficient $$ \\omega_0 = \\sqrt{\\frac{g}{L}} $$ is the natural frequency of the pendulum $$ A $$ is the amplitude of the external driving force $$ \\omega $$ is the frequency of the driving force Small-Angle Approximation For small oscillations ($$ \\theta \\ll 1 $$), we approximate $$ \\sin(\\theta) \\approx \\theta $$, yielding: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] This linearized equation describes a damped driven harmonic oscillator. Resonance Conditions The system reaches resonance when the driving frequency $$ \\omega $$ approaches the natural frequency $$ \\omega_0 $$, resulting in a large amplitude response. The resonance condition can be analyzed using the steady-state solution: \\[ \\theta(t) = \\theta_0 \\cos(\\omega t - \\delta) \\] Where the amplitude $$ \\theta_0 $$ depends on $$ \\gamma $$ and is maximized when $$ \\omega = \\omega_0 $$ for small damping. 2. Analysis of Dynamics The dynamics of the pendulum strongly depend on three main parameters: Damping Coefficient (\u03b3) : Controls energy dissipation Driving Amplitude (A) : Determines the strength of the external force Driving Frequency (\u03c9) : Sets the periodicity of the forcing Qualitative Behavior Low damping, low amplitude : Quasiperiodic or periodic motion. High damping : Motion settles to equilibrium. Intermediate damping, high amplitude : Chaotic motion may emerge. Chaotic Transitions As parameters vary, the system can undergo a bifurcation leading to chaos. This is analyzed using: Phase portraits : $$ (\\theta, \\dot{\\theta}) $$ Poincar\u00e9 sections : Intersections at regular time intervals Bifurcation diagrams : Plotting asymptotic behavior versus a parameter (e.g., driving amplitude) 3. Practical Applications Energy Harvesting : Devices use oscillatory motion to convert mechanical energy to electrical energy. Suspension Bridges : Oscillations under wind or traffic loads require damping mechanisms to avoid resonance. Oscillating Circuits : Driven RLC circuits are analogs of the pendulum system. 4. Implementation Strategy Numerical Integration Use the 4th-order Runge-Kutta method to solve the second-order ODE numerically. Convert to a system of first-order ODEs: \\[ \\begin{aligned} \\frac{d\\theta}{dt} &= \\omega_1 \\\\ \\frac{d\\omega_1}{dt} &= -\\gamma \\omega_1 - \\omega_0^2 \\sin(\\theta) + A \\cos(\\omega t) \\end{aligned} \\] Simulation Objectives Observe time evolution of $$ \\theta(t) $$ Plot phase space $$ (\\theta, \\dot{\\theta}) $$ Generate Poincar\u00e9 sections to detect chaos Construct bifurcation diagrams by varying $$ A $$ 5. Graphical Representations Time series for $$ \\theta(t) $$ under different damping and forcing Phase diagrams : Plot of $$ \\dot{\\theta} $$ versus $$ \\theta $$ Poincar\u00e9 sections : Stroboscopic maps showing intersections of the trajectory Bifurcation diagrams : Show the qualitative change in dynamics as a parameter (e.g., $$ A $$ or $$ \\omega $$) varies 6. Limitations and Extensions Limitations Small-angle approximation limits accuracy for large $$ \\theta $$ Assumes periodic sinusoidal forcing No consideration of friction-dependent damping Extensions Nonlinear Damping : Replace linear damping term with $$ \\gamma |\\dot{\\theta}| \\dot{\\theta} $$ Non-periodic Driving Forces : Consider random or pulsed excitations Coupled Pendula : Study synchronization and wave propagation 7. Code and Visualization (To Be Implemented in Python) Simulations will be implemented using Python with numpy , matplotlib , and scipy.integrate.solve_ivp . Results will be visualized as dynamic plots and saved figures, ready for embedding into the website. References Strogatz, S. H. Nonlinear Dynamics and Chaos: With Applications to Physics, Biology, Chemistry, and Engineering. Nayfeh, A. H., & Mook, D. T. Nonlinear Oscillations. Guckenheimer, J., & Holmes, P. Nonlinear Oscillations, Dynamical Systems, and Bifurcations of Vector Fields.","title":"Problem 2: Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2-investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Problem 2: Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#motivation","text":"The forced damped pendulum is a classic example of a nonlinear dynamical system that exhibits a wide range of complex behaviors. These include simple harmonic motion, resonance, quasiperiodicity, and chaos. The system models real-world phenomena such as mechanical oscillations under periodic loading, electrical circuits with alternating current, and climate dynamics. Understanding the response of the pendulum to varying damping coefficients and external driving forces is crucial for designing stable and efficient engineering systems. This problem explores the physics underlying the forced damped pendulum and uses numerical simulations to uncover its intricate dynamical behavior.","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"The motion of a forced damped pendulum is governed by the following second-order nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Where: $$ \\theta(t) $$ is the angular displacement as a function of time $$ \\gamma $$ is the damping coefficient $$ \\omega_0 = \\sqrt{\\frac{g}{L}} $$ is the natural frequency of the pendulum $$ A $$ is the amplitude of the external driving force $$ \\omega $$ is the frequency of the driving force","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small oscillations ($$ \\theta \\ll 1 $$), we approximate $$ \\sin(\\theta) \\approx \\theta $$, yielding: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] This linearized equation describes a damped driven harmonic oscillator.","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-conditions","text":"The system reaches resonance when the driving frequency $$ \\omega $$ approaches the natural frequency $$ \\omega_0 $$, resulting in a large amplitude response. The resonance condition can be analyzed using the steady-state solution: \\[ \\theta(t) = \\theta_0 \\cos(\\omega t - \\delta) \\] Where the amplitude $$ \\theta_0 $$ depends on $$ \\gamma $$ and is maximized when $$ \\omega = \\omega_0 $$ for small damping.","title":"Resonance Conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"The dynamics of the pendulum strongly depend on three main parameters: Damping Coefficient (\u03b3) : Controls energy dissipation Driving Amplitude (A) : Determines the strength of the external force Driving Frequency (\u03c9) : Sets the periodicity of the forcing","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#qualitative-behavior","text":"Low damping, low amplitude : Quasiperiodic or periodic motion. High damping : Motion settles to equilibrium. Intermediate damping, high amplitude : Chaotic motion may emerge.","title":"Qualitative Behavior"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#chaotic-transitions","text":"As parameters vary, the system can undergo a bifurcation leading to chaos. This is analyzed using: Phase portraits : $$ (\\theta, \\dot{\\theta}) $$ Poincar\u00e9 sections : Intersections at regular time intervals Bifurcation diagrams : Plotting asymptotic behavior versus a parameter (e.g., driving amplitude)","title":"Chaotic Transitions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"Energy Harvesting : Devices use oscillatory motion to convert mechanical energy to electrical energy. Suspension Bridges : Oscillations under wind or traffic loads require damping mechanisms to avoid resonance. Oscillating Circuits : Driven RLC circuits are analogs of the pendulum system.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation-strategy","text":"","title":"4. Implementation Strategy"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#numerical-integration","text":"Use the 4th-order Runge-Kutta method to solve the second-order ODE numerically. Convert to a system of first-order ODEs: \\[ \\begin{aligned} \\frac{d\\theta}{dt} &= \\omega_1 \\\\ \\frac{d\\omega_1}{dt} &= -\\gamma \\omega_1 - \\omega_0^2 \\sin(\\theta) + A \\cos(\\omega t) \\end{aligned} \\]","title":"Numerical Integration"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#simulation-objectives","text":"Observe time evolution of $$ \\theta(t) $$ Plot phase space $$ (\\theta, \\dot{\\theta}) $$ Generate Poincar\u00e9 sections to detect chaos Construct bifurcation diagrams by varying $$ A $$","title":"Simulation Objectives"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-graphical-representations","text":"Time series for $$ \\theta(t) $$ under different damping and forcing Phase diagrams : Plot of $$ \\dot{\\theta} $$ versus $$ \\theta $$ Poincar\u00e9 sections : Stroboscopic maps showing intersections of the trajectory Bifurcation diagrams : Show the qualitative change in dynamics as a parameter (e.g., $$ A $$ or $$ \\omega $$) varies","title":"5. Graphical Representations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#6-limitations-and-extensions","text":"","title":"6. Limitations and Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#limitations","text":"Small-angle approximation limits accuracy for large $$ \\theta $$ Assumes periodic sinusoidal forcing No consideration of friction-dependent damping","title":"Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#extensions","text":"Nonlinear Damping : Replace linear damping term with $$ \\gamma |\\dot{\\theta}| \\dot{\\theta} $$ Non-periodic Driving Forces : Consider random or pulsed excitations Coupled Pendula : Study synchronization and wave propagation","title":"Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#7-code-and-visualization-to-be-implemented-in-python","text":"Simulations will be implemented using Python with numpy , matplotlib , and scipy.integrate.solve_ivp . Results will be visualized as dynamic plots and saved figures, ready for embedding into the website.","title":"7. Code and Visualization (To Be Implemented in Python)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#references","text":"Strogatz, S. H. Nonlinear Dynamics and Chaos: With Applications to Physics, Biology, Chemistry, and Engineering. Nayfeh, A. H., & Mook, D. T. Nonlinear Oscillations. Guckenheimer, J., & Holmes, P. Nonlinear Oscillations, Dynamical Systems, and Bifurcations of Vector Fields.","title":"References"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}