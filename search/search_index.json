{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection Motivation Projectile motion, while seemingly simple, offers a rich playground for exploring fundamental principles of physics. The problem is straightforward: analyze how the range of a projectile depends on its angle of projection. Yet, beneath this simplicity lies a complex and versatile framework. The equations governing projectile motion involve both linear and quadratic relationships, making them accessible yet deeply insightful. What makes this topic particularly compelling is the number of free parameters involved in these equations, such as initial velocity, gravitational acceleration, and launch height. These parameters give rise to a diverse set of solutions that can describe a wide array of real-world phenomena, from the arc of a soccer ball to the trajectory of a rocket. Theoretical Foundation Derive the governing equations of projectile motion from fundamental principles. Present the general form of the motion by solving basic differential equations. Highlight how variations in initial conditions lead to a family of solutions. Analysis of the Range Investigate how the horizontal range depends on the angle of projection. Discuss how changes in parameters such as initial velocity and gravitational acceleration affect the outcome. Practical Applications Explore how this model applies to real-world scenarios, including uneven terrain and air resistance. Reflect on how various modifications allow the model to describe more complex trajectories. Implementation Develop a computational tool or algorithm to simulate projectile motion. Visualize the range as a function of the angle of projection for different sets of initial conditions. Deliverables A Markdown document including a Python script or notebook implementing the simulations. A detailed explanation of the family of solutions derived from the governing equations. Graphs illustrating the relationship between range and angle, emphasizing how different parameters influence the curve. A discussion about the limitations of the idealized model and possible improvements by considering realistic factors like air drag or wind. Hints and Resources Start from the fundamental laws of motion to build your solution step-by-step. Use numerical methods or simulations to analyze complex cases beyond analytical scope. Connect this model to practical fields such as sports physics, engineering, and astrophysics. This assignment encourages a deep understanding of projectile motion while showcasing its versatility and real-world applicability. Solution Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Projectile motion is governed by Newton's laws. The equations of motion for a projectile launched at an angle \\( \\theta \\) with initial velocity \\( v_0 \\) are derived from kinematic equations: Differential Equation of Motion The motion of a projectile is governed by the second-order differential equations: $$ \\frac{d^2x}{dt^2} = 0, \\quad \\frac{d^2y}{dt^2} = -g $$ Integrating once: $$ \\frac{dx}{dt} = v_0 \\cos(\\theta), \\quad \\frac{dy}{dt} = v_0 \\sin(\\theta) - g t $$ Integrating again: $$ x(t) = v_0 \\cos(\\theta) t, \\quad y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$ Equations of Motion Horizontal displacement: $$ x(t) = v_0 \\cos(\\theta) t $$ Vertical displacement: $$ y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$ To find the range \\( R \\) , we determine the time of flight \\( T_f \\) : $$ T_f = \\frac{2 v_0 \\sin(\\theta)}{g} $$ Substituting into the horizontal displacement: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ 2. Analysis of the Range The maximum range occurs at \\( \\theta = 45^\\circ \\) , yielding: $$ R_{\\max} = \\frac{v_0^2}{g} $$ Why is \\( 45^\\circ \\) the optimal angle? The range formula for projectile motion (neglecting air resistance) is: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ The sine function reaches its maximum value when \\( 2\\theta = 90^\\circ \\) , meaning: $$ \\theta = 45^\\circ $$ At this angle, the horizontal velocity and vertical velocity are balanced, maximizing the distance traveled. Representations: Gravity Influence: Lower gravity increases range (e.g., Moon vs. Earth). Velocity Impact: Higher velocity increases range quadratically. 3. Practical Applications Projectile motion has a wide range of practical applications across various fields. Understanding the principles behind projectile trajectories allows for better planning, optimization, and decision-making. Here are some key areas where these concepts are applied: 3.1 Sports In sports such as football, basketball, and golf, the trajectory of balls is often analyzed to improve player performance and strategy. Understanding how different angles and speeds affect the distance and trajectory of a ball can help athletes optimize their throws, kicks, and swings. Coaches and players can use this information to improve accuracy and maximize the effectiveness of their plays. Football : The trajectory of a football when kicked for a field goal or a punt is a classic example of projectile motion. The optimal launch angle and velocity for achieving maximum distance and accuracy are essential. Golf : In golf, golfers use their knowledge of projectile motion to determine the ideal angle for hitting the ball to achieve maximum distance and ensure it lands where they want. Basketball : The angle at which a basketball is thrown affects the likelihood of it going through the hoop. Understanding projectile motion helps players optimize their shooting angles and force for better accuracy. 3.2 Engineering Projectile motion principles are also applied in engineering, especially in the design and optimization of systems involving the launch or movement of objects. Engineers working in fields like aerospace, mechanical, and civil engineering must understand how objects travel through air or space. Ballistics Engineering : Ballistics engineers use these principles to design and test the trajectories of projectiles such as missiles and bombs. Understanding the physics behind projectile motion ensures the effectiveness and precision of weapons. Aerospace Engineering : The principles of projectile motion are also fundamental in the design of spacecraft and satellites, particularly when launching probes into orbit. These calculations help engineers predict the trajectory of a spacecraft during its journey, ensuring accurate positioning and minimizing fuel consumption. 3.3 Astrophysics In astrophysics, the study of projectile motion is crucial for calculating the orbits of planets, moons, satellites, and other celestial bodies. Understanding the motion of objects in space allows scientists to predict their movements and plan missions to explore distant regions. Satellite Orbits : The trajectories of satellites around Earth or other planets are determined by applying the principles of projectile motion. Engineers and astrophysicists use these principles to ensure satellites stay in orbit and fulfill their intended functions. Space Probes : Space agencies like NASA rely on precise projectile motion calculations when launching probes to explore planets, moons, and asteroids. Accurate predictions of trajectory and range are essential to ensure that these probes reach their targets, such as Mars or Jupiter's moons, without missing their mark. 4. Implementation The following Python script implements additional simulations: You can run the simulation in Google Colab by clicking the link below: \u25b6 Run in Google Colab import numpy as np import matplotlib.pyplot as plt from matplotlib.animation import FuncAnimation from IPython.display import HTML def projectile_trajectory(v0, angle, g=9.81, h=0, dt=0.05): angle_rad = np.radians(angle) vx = v0 * np.cos(angle_rad) vy = v0 * np.sin(angle_rad) x, y = [0], [h] t = 0 while y[-1] >= 0: t += dt x.append(vx * t) y.append(h + vy * t - 0.5 * g * t**2) return np.array(x), np.array(y) # 1. Three different velocities on the same plot plt.figure(figsize=(8,5)) plt.ylim(0, 60) for v0 in [10, 20, 30]: x, y = projectile_trajectory(v0, 45) plt.plot(x, y, label=f'v0 = {v0} m/s') plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion with Different Velocities\") plt.legend() plt.grid() plt.show() # 2. Same initial conditions on three different planets plt.figure(figsize=(8,5)) plt.ylim(0, 60) planets = {\"Earth\": 9.81, \"Moon\": 1.62, \"Jupiter\": 24.79} for planet, g in planets.items(): x, y = projectile_trajectory(20, 45, g) plt.plot(x, y, label=planet) plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion on Different Planets\") plt.legend() plt.grid() plt.show() # 3. Different heights plt.figure(figsize=(8,5)) plt.ylim(0, 60) for h in [0, 10, 20]: x, y = projectile_trajectory(20, 45, 9.81, h) plt.plot(x, y, label=f'Height = {h}m') plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion with Different Initial Heights\") plt.legend() plt.grid() plt.show() # 4. Air resistance vs. no air resistance plt.figure(figsize=(8,5)) plt.ylim(0, 60) def projectile_with_drag(v0, angle, g=9.81, h=0, dt=0.05, drag_coeff=0.1): angle_rad = np.radians(angle) vx, vy = v0 * np.cos(angle_rad), v0 * np.sin(angle_rad) x, y = [0], [h] t = 0 while y[-1] >= 0: t += dt vx -= drag_coeff * vx * dt vy -= (g + drag_coeff * vy) * dt x.append(x[-1] + vx * dt) y.append(y[-1] + vy * dt) return np.array(x), np.array(y) x_no_drag, y_no_drag = projectile_trajectory(20, 45) x_drag, y_drag = projectile_with_drag(20, 45) plt.plot(x_no_drag, y_no_drag, label=\"No Air Resistance\") plt.plot(x_drag, y_drag, linestyle='dashed', label=\"With Air Resistance\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion With and Without Air Resistance\") plt.legend() plt.grid() plt.show() Different Velocities: Different Planets: Different Initial Heights: Difference between with and without air resistance: 5. Limitations and Future Work While the idealized model of projectile motion offers significant insight into the physics of motion under uniform gravity, it inherently excludes numerous real-world influences. To advance the fidelity and applicability of the model, several extensions are proposed. Below is a detailed analysis of the model's key limitations and potential enhancements. 5.1 Simplified Assumptions in the Classical Model The classical projectile motion equations are derived under idealized conditions, assuming: No Air Resistance : The model neglects drag forces, which in reality oppose motion and reduce both range and maximum height. Uniform Terrain : A flat surface is assumed, overlooking how uneven terrain or varying elevations affect both launch and landing dynamics. Constant Gravitational Field : Gravity is considered a constant (typically \\(9.81 \\, m/s^2\\) ), although it slightly varies with altitude and geographic location. These simplifications make the model analytically tractable but limit its realism, especially for high-speed or long-range projectiles. \ud83d\udd2c Simulation: Ideal Projectile Motion The Python code below simulates projectile motion under these simplified assumptions. It compares three different launch angles (30\u00b0, 45\u00b0, 60\u00b0) with a fixed initial velocity, assuming: No drag Flat ground Constant gravitational acceleration \u25b6 Run in Google Colab import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # gravity (m/s^2) angles = [30, 45, 60] # degrees v0 = 25 # initial velocity (m/s) # Function to calculate ideal projectile motion def projectile_ideal(v0, angle_deg): angle_rad = np.radians(angle_deg) t_flight = 2 * v0 * np.sin(angle_rad) / g t = np.linspace(0, t_flight, num=200) x = v0 * np.cos(angle_rad) * t y = v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 return x, y # Plotting plt.figure(figsize=(10, 5)) for angle in angles: x, y = projectile_ideal(v0, angle) plt.plot(x, y, label=f\"{angle}\u00b0\") plt.title(\"Idealized Projectile Motion (No Air Resistance, Flat Terrain, Constant Gravity)\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.legend(title=\"Launch Angle\") plt.grid(True) plt.tight_layout() plt.show() This visualization highlights the elegant parabolic nature of projectile trajectories in an idealized setting, laying the groundwork for deeper models that include real-world complexity. 5.2 Modeling Air Resistance and Drag Forces One of the most significant oversights in the classical model is the exclusion of air resistance . Realistic modeling involves solving differential equations incorporating a drag term: \\[ F_d = \\frac{1}{2} C_d \\rho A v^2 \\] Where: - \\(C_d\\) = Drag coefficient (depends on shape and surface) - \\(\\rho\\) = Air density - \\(A\\) = Cross-sectional area - \\(v\\) = Velocity Future Work: - Implement the drag equation into motion equations. - Analyze how the inclusion of drag alters trajectory curvature and range. \ud83d\udd2c Graphical Comparison Using Python Below is a sample Python snippet that compares ideal vs drag-influenced projectile motion: You can run the simulation in Google Colab by clicking the link below: \u25b6 Run in Google Colab import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Constants g = 9.81 # gravity (m/s^2) v0 = 50 # initial velocity (m/s) theta = 45 # launch angle (degrees) Cd = 0.47 # drag coefficient (sphere) rho = 1.225 # air density (kg/m^3) A = 0.01 # cross-sectional area (m^2) m = 0.145 # mass (kg) # Initial velocities vx0 = v0 * np.cos(np.radians(theta)) vy0 = v0 * np.sin(np.radians(theta)) # System of differential equations def drag_projectile(t, y): vx, vy, x, y_pos = y v = np.sqrt(vx**2 + vy**2) Fd = 0.5 * Cd * rho * A * v**2 ax = -Fd * vx / (m * v) ay = -g - (Fd * vy / (m * v)) return [ax, ay, vx, vy] # Event to stop integration when projectile hits the ground def hit_ground(t, y): return y[3] # y-position hit_ground.terminal = True hit_ground.direction = -1 # Solve with air resistance sol = solve_ivp( drag_projectile, [0, 10], [vx0, vy0, 0, 0], events=hit_ground, max_step=0.01 ) x_drag, y_drag = sol.y[2], sol.y[3] # Ideal trajectory t = np.linspace(0, 2 * vy0 / g, 100) x_ideal = vx0 * t y_ideal = vy0 * t - 0.5 * g * t**2 # Plotting plt.figure(figsize=(10, 5)) plt.plot(x_ideal, y_ideal, label=\"No Drag (Ideal)\", linestyle=\"--\") plt.plot(x_drag, y_drag, label=\"With Air Drag\") plt.xlabel(\"Distance (m)\") plt.ylabel(\"Height (m)\") plt.title(\"Projectile Motion: Ideal vs With Air Resistance\") plt.legend() plt.grid(True) plt.tight_layout() plt.show() Conclusion: In conclusion, while the basic model offers a solid foundation for understanding projectile motion, future work should expand the model to account for a broader range of real-world factors. By incorporating air resistance, varying terrain, and other external forces, we can achieve more accurate simulations and predictions, ultimately enhancing applications in fields like aerospace, sports, and environmental science. Further Viewing For a quick and visual summary of projectile motion, watch this short video: \ud83c\udfa5 Physics Made Easy \u2013 Projectile Motion (YouTube)","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#motivation","text":"Projectile motion, while seemingly simple, offers a rich playground for exploring fundamental principles of physics. The problem is straightforward: analyze how the range of a projectile depends on its angle of projection. Yet, beneath this simplicity lies a complex and versatile framework. The equations governing projectile motion involve both linear and quadratic relationships, making them accessible yet deeply insightful. What makes this topic particularly compelling is the number of free parameters involved in these equations, such as initial velocity, gravitational acceleration, and launch height. These parameters give rise to a diverse set of solutions that can describe a wide array of real-world phenomena, from the arc of a soccer ball to the trajectory of a rocket.","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#theoretical-foundation","text":"Derive the governing equations of projectile motion from fundamental principles. Present the general form of the motion by solving basic differential equations. Highlight how variations in initial conditions lead to a family of solutions.","title":"Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#analysis-of-the-range","text":"Investigate how the horizontal range depends on the angle of projection. Discuss how changes in parameters such as initial velocity and gravitational acceleration affect the outcome.","title":"Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#practical-applications","text":"Explore how this model applies to real-world scenarios, including uneven terrain and air resistance. Reflect on how various modifications allow the model to describe more complex trajectories.","title":"Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#implementation","text":"Develop a computational tool or algorithm to simulate projectile motion. Visualize the range as a function of the angle of projection for different sets of initial conditions.","title":"Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#deliverables","text":"A Markdown document including a Python script or notebook implementing the simulations. A detailed explanation of the family of solutions derived from the governing equations. Graphs illustrating the relationship between range and angle, emphasizing how different parameters influence the curve. A discussion about the limitations of the idealized model and possible improvements by considering realistic factors like air drag or wind.","title":"Deliverables"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#hints-and-resources","text":"Start from the fundamental laws of motion to build your solution step-by-step. Use numerical methods or simulations to analyze complex cases beyond analytical scope. Connect this model to practical fields such as sports physics, engineering, and astrophysics. This assignment encourages a deep understanding of projectile motion while showcasing its versatility and real-world applicability.","title":"Hints and Resources"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#solution","text":"","title":"Solution"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection_1","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"Projectile motion is governed by Newton's laws. The equations of motion for a projectile launched at an angle \\( \\theta \\) with initial velocity \\( v_0 \\) are derived from kinematic equations:","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#differential-equation-of-motion","text":"The motion of a projectile is governed by the second-order differential equations: $$ \\frac{d^2x}{dt^2} = 0, \\quad \\frac{d^2y}{dt^2} = -g $$ Integrating once: $$ \\frac{dx}{dt} = v_0 \\cos(\\theta), \\quad \\frac{dy}{dt} = v_0 \\sin(\\theta) - g t $$ Integrating again: $$ x(t) = v_0 \\cos(\\theta) t, \\quad y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$","title":"Differential Equation of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#equations-of-motion","text":"Horizontal displacement: $$ x(t) = v_0 \\cos(\\theta) t $$ Vertical displacement: $$ y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$ To find the range \\( R \\) , we determine the time of flight \\( T_f \\) : $$ T_f = \\frac{2 v_0 \\sin(\\theta)}{g} $$ Substituting into the horizontal displacement: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$","title":"Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The maximum range occurs at \\( \\theta = 45^\\circ \\) , yielding: $$ R_{\\max} = \\frac{v_0^2}{g} $$ Why is \\( 45^\\circ \\) the optimal angle? The range formula for projectile motion (neglecting air resistance) is: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ The sine function reaches its maximum value when \\( 2\\theta = 90^\\circ \\) , meaning: $$ \\theta = 45^\\circ $$ At this angle, the horizontal velocity and vertical velocity are balanced, maximizing the distance traveled. Representations: Gravity Influence: Lower gravity increases range (e.g., Moon vs. Earth). Velocity Impact: Higher velocity increases range quadratically.","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Projectile motion has a wide range of practical applications across various fields. Understanding the principles behind projectile trajectories allows for better planning, optimization, and decision-making. Here are some key areas where these concepts are applied:","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#31-sports","text":"In sports such as football, basketball, and golf, the trajectory of balls is often analyzed to improve player performance and strategy. Understanding how different angles and speeds affect the distance and trajectory of a ball can help athletes optimize their throws, kicks, and swings. Coaches and players can use this information to improve accuracy and maximize the effectiveness of their plays. Football : The trajectory of a football when kicked for a field goal or a punt is a classic example of projectile motion. The optimal launch angle and velocity for achieving maximum distance and accuracy are essential. Golf : In golf, golfers use their knowledge of projectile motion to determine the ideal angle for hitting the ball to achieve maximum distance and ensure it lands where they want. Basketball : The angle at which a basketball is thrown affects the likelihood of it going through the hoop. Understanding projectile motion helps players optimize their shooting angles and force for better accuracy.","title":"3.1 Sports"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#32-engineering","text":"Projectile motion principles are also applied in engineering, especially in the design and optimization of systems involving the launch or movement of objects. Engineers working in fields like aerospace, mechanical, and civil engineering must understand how objects travel through air or space. Ballistics Engineering : Ballistics engineers use these principles to design and test the trajectories of projectiles such as missiles and bombs. Understanding the physics behind projectile motion ensures the effectiveness and precision of weapons. Aerospace Engineering : The principles of projectile motion are also fundamental in the design of spacecraft and satellites, particularly when launching probes into orbit. These calculations help engineers predict the trajectory of a spacecraft during its journey, ensuring accurate positioning and minimizing fuel consumption.","title":"3.2 Engineering"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#33-astrophysics","text":"In astrophysics, the study of projectile motion is crucial for calculating the orbits of planets, moons, satellites, and other celestial bodies. Understanding the motion of objects in space allows scientists to predict their movements and plan missions to explore distant regions. Satellite Orbits : The trajectories of satellites around Earth or other planets are determined by applying the principles of projectile motion. Engineers and astrophysicists use these principles to ensure satellites stay in orbit and fulfill their intended functions. Space Probes : Space agencies like NASA rely on precise projectile motion calculations when launching probes to explore planets, moons, and asteroids. Accurate predictions of trajectory and range are essential to ensure that these probes reach their targets, such as Mars or Jupiter's moons, without missing their mark.","title":"3.3 Astrophysics"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"The following Python script implements additional simulations: You can run the simulation in Google Colab by clicking the link below: \u25b6 Run in Google Colab import numpy as np import matplotlib.pyplot as plt from matplotlib.animation import FuncAnimation from IPython.display import HTML def projectile_trajectory(v0, angle, g=9.81, h=0, dt=0.05): angle_rad = np.radians(angle) vx = v0 * np.cos(angle_rad) vy = v0 * np.sin(angle_rad) x, y = [0], [h] t = 0 while y[-1] >= 0: t += dt x.append(vx * t) y.append(h + vy * t - 0.5 * g * t**2) return np.array(x), np.array(y) # 1. Three different velocities on the same plot plt.figure(figsize=(8,5)) plt.ylim(0, 60) for v0 in [10, 20, 30]: x, y = projectile_trajectory(v0, 45) plt.plot(x, y, label=f'v0 = {v0} m/s') plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion with Different Velocities\") plt.legend() plt.grid() plt.show() # 2. Same initial conditions on three different planets plt.figure(figsize=(8,5)) plt.ylim(0, 60) planets = {\"Earth\": 9.81, \"Moon\": 1.62, \"Jupiter\": 24.79} for planet, g in planets.items(): x, y = projectile_trajectory(20, 45, g) plt.plot(x, y, label=planet) plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion on Different Planets\") plt.legend() plt.grid() plt.show() # 3. Different heights plt.figure(figsize=(8,5)) plt.ylim(0, 60) for h in [0, 10, 20]: x, y = projectile_trajectory(20, 45, 9.81, h) plt.plot(x, y, label=f'Height = {h}m') plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion with Different Initial Heights\") plt.legend() plt.grid() plt.show() # 4. Air resistance vs. no air resistance plt.figure(figsize=(8,5)) plt.ylim(0, 60) def projectile_with_drag(v0, angle, g=9.81, h=0, dt=0.05, drag_coeff=0.1): angle_rad = np.radians(angle) vx, vy = v0 * np.cos(angle_rad), v0 * np.sin(angle_rad) x, y = [0], [h] t = 0 while y[-1] >= 0: t += dt vx -= drag_coeff * vx * dt vy -= (g + drag_coeff * vy) * dt x.append(x[-1] + vx * dt) y.append(y[-1] + vy * dt) return np.array(x), np.array(y) x_no_drag, y_no_drag = projectile_trajectory(20, 45) x_drag, y_drag = projectile_with_drag(20, 45) plt.plot(x_no_drag, y_no_drag, label=\"No Air Resistance\") plt.plot(x_drag, y_drag, linestyle='dashed', label=\"With Air Resistance\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion With and Without Air Resistance\") plt.legend() plt.grid() plt.show()","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#different-velocities","text":"","title":"Different Velocities:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#different-planets","text":"","title":"Different Planets:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#different-initial-heights","text":"","title":"Different Initial Heights:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#difference-between-with-and-without-air-resistance","text":"","title":"Difference between with and without air resistance:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-limitations-and-future-work","text":"While the idealized model of projectile motion offers significant insight into the physics of motion under uniform gravity, it inherently excludes numerous real-world influences. To advance the fidelity and applicability of the model, several extensions are proposed. Below is a detailed analysis of the model's key limitations and potential enhancements.","title":"5. Limitations and Future Work"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#51-simplified-assumptions-in-the-classical-model","text":"The classical projectile motion equations are derived under idealized conditions, assuming: No Air Resistance : The model neglects drag forces, which in reality oppose motion and reduce both range and maximum height. Uniform Terrain : A flat surface is assumed, overlooking how uneven terrain or varying elevations affect both launch and landing dynamics. Constant Gravitational Field : Gravity is considered a constant (typically \\(9.81 \\, m/s^2\\) ), although it slightly varies with altitude and geographic location. These simplifications make the model analytically tractable but limit its realism, especially for high-speed or long-range projectiles.","title":"5.1 Simplified Assumptions in the Classical Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#simulation-ideal-projectile-motion","text":"The Python code below simulates projectile motion under these simplified assumptions. It compares three different launch angles (30\u00b0, 45\u00b0, 60\u00b0) with a fixed initial velocity, assuming: No drag Flat ground Constant gravitational acceleration \u25b6 Run in Google Colab import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # gravity (m/s^2) angles = [30, 45, 60] # degrees v0 = 25 # initial velocity (m/s) # Function to calculate ideal projectile motion def projectile_ideal(v0, angle_deg): angle_rad = np.radians(angle_deg) t_flight = 2 * v0 * np.sin(angle_rad) / g t = np.linspace(0, t_flight, num=200) x = v0 * np.cos(angle_rad) * t y = v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 return x, y # Plotting plt.figure(figsize=(10, 5)) for angle in angles: x, y = projectile_ideal(v0, angle) plt.plot(x, y, label=f\"{angle}\u00b0\") plt.title(\"Idealized Projectile Motion (No Air Resistance, Flat Terrain, Constant Gravity)\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.legend(title=\"Launch Angle\") plt.grid(True) plt.tight_layout() plt.show() This visualization highlights the elegant parabolic nature of projectile trajectories in an idealized setting, laying the groundwork for deeper models that include real-world complexity.","title":"\ud83d\udd2c Simulation: Ideal Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#52-modeling-air-resistance-and-drag-forces","text":"One of the most significant oversights in the classical model is the exclusion of air resistance . Realistic modeling involves solving differential equations incorporating a drag term: \\[ F_d = \\frac{1}{2} C_d \\rho A v^2 \\] Where: - \\(C_d\\) = Drag coefficient (depends on shape and surface) - \\(\\rho\\) = Air density - \\(A\\) = Cross-sectional area - \\(v\\) = Velocity Future Work: - Implement the drag equation into motion equations. - Analyze how the inclusion of drag alters trajectory curvature and range.","title":"5.2 Modeling Air Resistance and Drag Forces"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#graphical-comparison-using-python","text":"Below is a sample Python snippet that compares ideal vs drag-influenced projectile motion: You can run the simulation in Google Colab by clicking the link below: \u25b6 Run in Google Colab import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Constants g = 9.81 # gravity (m/s^2) v0 = 50 # initial velocity (m/s) theta = 45 # launch angle (degrees) Cd = 0.47 # drag coefficient (sphere) rho = 1.225 # air density (kg/m^3) A = 0.01 # cross-sectional area (m^2) m = 0.145 # mass (kg) # Initial velocities vx0 = v0 * np.cos(np.radians(theta)) vy0 = v0 * np.sin(np.radians(theta)) # System of differential equations def drag_projectile(t, y): vx, vy, x, y_pos = y v = np.sqrt(vx**2 + vy**2) Fd = 0.5 * Cd * rho * A * v**2 ax = -Fd * vx / (m * v) ay = -g - (Fd * vy / (m * v)) return [ax, ay, vx, vy] # Event to stop integration when projectile hits the ground def hit_ground(t, y): return y[3] # y-position hit_ground.terminal = True hit_ground.direction = -1 # Solve with air resistance sol = solve_ivp( drag_projectile, [0, 10], [vx0, vy0, 0, 0], events=hit_ground, max_step=0.01 ) x_drag, y_drag = sol.y[2], sol.y[3] # Ideal trajectory t = np.linspace(0, 2 * vy0 / g, 100) x_ideal = vx0 * t y_ideal = vy0 * t - 0.5 * g * t**2 # Plotting plt.figure(figsize=(10, 5)) plt.plot(x_ideal, y_ideal, label=\"No Drag (Ideal)\", linestyle=\"--\") plt.plot(x_drag, y_drag, label=\"With Air Drag\") plt.xlabel(\"Distance (m)\") plt.ylabel(\"Height (m)\") plt.title(\"Projectile Motion: Ideal vs With Air Resistance\") plt.legend() plt.grid(True) plt.tight_layout() plt.show()","title":"\ud83d\udd2c Graphical Comparison Using Python"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"In conclusion, while the basic model offers a solid foundation for understanding projectile motion, future work should expand the model to account for a broader range of real-world factors. By incorporating air resistance, varying terrain, and other external forces, we can achieve more accurate simulations and predictions, ultimately enhancing applications in fields like aerospace, sports, and environmental science.","title":"Conclusion:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#further-viewing","text":"For a quick and visual summary of projectile motion, watch this short video: \ud83c\udfa5 Physics Made Easy \u2013 Projectile Motion (YouTube)","title":"Further Viewing"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum Motivation The forced damped pendulum is a captivating and powerful model in nonlinear dynamics. It exemplifies how the addition of damping and periodic driving can transform a system from simple harmonic motion into exhibiting rich and sometimes chaotic behavior. These dynamics are not only fascinating from a theoretical perspective but also deeply relevant in engineering, environmental science, and even biology. By varying the amplitude and frequency of the external force, one can observe synchronized motion, bifurcations, chaos, and resonance. These transitions give rise to a wide array of applications, such as energy harvesting, vibration isolation systems, and structural engineering solutions. Solution 1. Theoretical Foundation Governing Equation The motion of a forced damped pendulum is governed by: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = A \\cos(\\omega t) \\] Where: Symbol Description \\(\\theta(t)\\) Angular displacement \\(\\gamma\\) Damping coefficient \\(g\\) Gravitational acceleration \\(L\\) Length of the pendulum \\(A\\) Amplitude of the driving force \\(\\omega\\) Frequency of the driving force This linear non-homogeneous equation allows a solution composed of two parts: Transient : Decaying oscillations due to damping Steady-state : Driven oscillations at the frequency \\(\\omega\\) Resonance Condition Resonance occurs when the driving frequency \\(\\omega\\) approaches the system's natural frequency: \\[ \\omega_0 = \\sqrt{\\frac{g}{L}} \\] At resonance, the pendulum experiences the maximum energy transfer from the driving force. 2. Analysis of Dynamics We examine the effect of three primary parameters: Damping ( \\(\\gamma\\) ) Low: Sustained oscillations High: Rapid energy dissipation Driving Amplitude ( \\(A\\) ) Low: Regular motion High: Chaotic transitions Driving Frequency ( \\(\\omega\\) ) $\\omega \\approx\\omega_0 $: Resonance \\(\\omega \\neq \\omega_0\\) : Sub-harmonic, quasiperiodic, or chaotic motion At certain parameter combinations, the pendulum displays chaotic motion \u2014highly sensitive to initial conditions and unpredictable over long time intervals. 3. Practical Applications Energy Harvesting : Vibrational energy can be converted into electrical energy using piezoelectric materials and pendulum dynamics. Suspension Bridges : Proper damping prevents failures like the Tacoma Narrows Bridge collapse. RLC Circuits : These circuits behave analogously to mechanical pendula and are essential in electronics. 4. Implementation: Python Simulation The following code includes independent simulations for each pendulum scenario. Each block shows: Angle vs Time Phase Portrait (Angle vs Angular Velocity) Model setup used in all cases: import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp def pendulum_model(t, y, gamma, omega0, A, omega): theta, omega1 = y dtheta_dt = omega1 domega_dt = -gamma * omega1 - omega0**2 * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] omega0 = 1.5 t_span = [0, 50] t_eval = np.linspace(*t_span, 2000) initial_state = [0.1, 0] Pure Pendulum (No Damping, No Forcing) Damped Pendulum (No Forcing) Forced Pendulum (No Damping) Forced Damped Pendulum - Resonance Forced Damped Pendulum - Chaotic Graphical Analysis Phase Portrait Poincar\u00e9 Section Bifurcation Diagram (Driving Amplitude) Google Colab You can run this simulation interactively here: \u25b6 Launch Google Colab Simulation Conclusion The forced damped pendulum illustrates how simple mechanical systems can transition from order to chaos. Through theoretical models and numerical experiments, we gain deep insight into resonance, energy transfer, and complex behavior\u2014insights that impact real systems in engineering, electronics, and the natural world.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#motivation","text":"The forced damped pendulum is a captivating and powerful model in nonlinear dynamics. It exemplifies how the addition of damping and periodic driving can transform a system from simple harmonic motion into exhibiting rich and sometimes chaotic behavior. These dynamics are not only fascinating from a theoretical perspective but also deeply relevant in engineering, environmental science, and even biology. By varying the amplitude and frequency of the external force, one can observe synchronized motion, bifurcations, chaos, and resonance. These transitions give rise to a wide array of applications, such as energy harvesting, vibration isolation systems, and structural engineering solutions.","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#solution","text":"","title":"Solution"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-equation","text":"The motion of a forced damped pendulum is governed by: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = A \\cos(\\omega t) \\] Where: Symbol Description \\(\\theta(t)\\) Angular displacement \\(\\gamma\\) Damping coefficient \\(g\\) Gravitational acceleration \\(L\\) Length of the pendulum \\(A\\) Amplitude of the driving force \\(\\omega\\) Frequency of the driving force This linear non-homogeneous equation allows a solution composed of two parts: Transient : Decaying oscillations due to damping Steady-state : Driven oscillations at the frequency \\(\\omega\\)","title":"Governing Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-condition","text":"Resonance occurs when the driving frequency \\(\\omega\\) approaches the system's natural frequency: \\[ \\omega_0 = \\sqrt{\\frac{g}{L}} \\] At resonance, the pendulum experiences the maximum energy transfer from the driving force.","title":"Resonance Condition"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"We examine the effect of three primary parameters: Damping ( \\(\\gamma\\) ) Low: Sustained oscillations High: Rapid energy dissipation Driving Amplitude ( \\(A\\) ) Low: Regular motion High: Chaotic transitions Driving Frequency ( \\(\\omega\\) ) $\\omega \\approx\\omega_0 $: Resonance \\(\\omega \\neq \\omega_0\\) : Sub-harmonic, quasiperiodic, or chaotic motion At certain parameter combinations, the pendulum displays chaotic motion \u2014highly sensitive to initial conditions and unpredictable over long time intervals.","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"Energy Harvesting : Vibrational energy can be converted into electrical energy using piezoelectric materials and pendulum dynamics. Suspension Bridges : Proper damping prevents failures like the Tacoma Narrows Bridge collapse. RLC Circuits : These circuits behave analogously to mechanical pendula and are essential in electronics.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation-python-simulation","text":"The following code includes independent simulations for each pendulum scenario. Each block shows: Angle vs Time Phase Portrait (Angle vs Angular Velocity) Model setup used in all cases: import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp def pendulum_model(t, y, gamma, omega0, A, omega): theta, omega1 = y dtheta_dt = omega1 domega_dt = -gamma * omega1 - omega0**2 * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] omega0 = 1.5 t_span = [0, 50] t_eval = np.linspace(*t_span, 2000) initial_state = [0.1, 0]","title":"4. Implementation: Python Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#pure-pendulum-no-damping-no-forcing","text":"","title":"Pure Pendulum (No Damping, No Forcing)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#damped-pendulum-no-forcing","text":"","title":"Damped Pendulum (No Forcing)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#forced-pendulum-no-damping","text":"","title":"Forced Pendulum (No Damping)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#forced-damped-pendulum-resonance","text":"","title":"Forced Damped Pendulum - Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#forced-damped-pendulum-chaotic","text":"","title":"Forced Damped Pendulum - Chaotic"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#graphical-analysis","text":"","title":"Graphical Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#phase-portrait","text":"","title":"Phase Portrait"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#poincare-section","text":"","title":"Poincar\u00e9 Section"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#bifurcation-diagram-driving-amplitude","text":"","title":"Bifurcation Diagram (Driving Amplitude)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#google-colab","text":"You can run this simulation interactively here: \u25b6 Launch Google Colab Simulation","title":"Google Colab"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#conclusion","text":"The forced damped pendulum illustrates how simple mechanical systems can transition from order to chaos. Through theoretical models and numerical experiments, we gain deep insight into resonance, energy transfer, and complex behavior\u2014insights that impact real systems in engineering, electronics, and the natural world.","title":"Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 3 Orbital Period and Orbital Radius \u2013 Exploring Kepler\u2019s Third Law and Beyond Motivation The motion of celestial bodies is governed by a balance of gravitational attraction and inertial motion. One of the most powerful tools to analyze these motions is Kepler\u2019s Third Law , which links the orbital period of a body to its orbital radius. Originally derived from planetary observations, this law has since been grounded in Newtonian mechanics and generalized to all two-body orbital systems. Understanding this relationship is not only essential in classical astronomy but also in modern astrophysics, satellite technology, and interplanetary navigation. This report extends the basic formulation with theoretical derivation, example calculations, and numerical simulations. 1. Theoretical Foundation 1.1 Newtonian Derivation of Kepler\u2019s Third Law In a circular orbit, the gravitational force between two bodies provides the required centripetal force: \\[ F_g = \\frac{G M m}{r^2}, \\quad F_c = m \\frac{v^2}{r} \\] Setting these equal: \\[ \\frac{G M m}{r^2} = m \\frac{v^2}{r} \\] Canceling terms and solving for velocity: \\[ v = \\sqrt{\\frac{G M}{r}} \\] Orbital period is the circumference divided by speed: \\[ T = \\frac{2\\pi r}{v} = 2\\pi \\sqrt{\\frac{r^3}{G M}} \\] Squaring both sides: \\[ T^2 = \\frac{4\\pi^2}{G M} r^3 \\] This is the generalized form of Kepler\u2019s Third Law . 1.2 Constants and Units \\(G = 6.674 \\times 10^{-11} \\, m^3 kg^{-1} s^{-2}\\) \u2014 Gravitational constant \\(M\\) \u2014 Mass of the central body (e.g., Earth, Sun) \\(r\\) \u2014 Orbital radius from the center of the mass \\(T\\) \u2014 Orbital period \\(v\\) \u2014 Orbital velocity 2. Practical Examples 2.1 Low Earth Orbit Satellite \\(M = 5.972 \\times 10^{24} \\, kg\\) (Earth) \\(r = 6.78 \\times 10^6 \\, m\\) (approx. Earth radius + 400 km) \\[ T = 2\\pi \\sqrt{\\frac{r^3}{G M}} \\approx 5.3 \\times 10^3 \\, s \\approx 88.3 \\, minutes \\] 2.2 Earth Around the Sun \\(M = 1.989 \\times 10^{30} \\, kg\\) (Sun) \\(r = 1.496 \\times 10^{11} \\, m\\) (1 AU) \\[ T \\approx 2\\pi \\sqrt{\\frac{r^3}{G M}} \\approx 3.16 \\times 10^7 \\, s \\approx 365.25 \\, days \\] 2.3 Mars Orbiting the Sun \\(r = 2.279 \\times 10^{11} \\, m\\) \\[ T_{\\text{Mars}} \\approx 687 \\, days \\] 3. Scientific Implications Planet Detection : Observing a star\u2019s wobble or dimming gives \\(T\\) , inferring \\(r\\) using this law. Mass Estimation : Rearranging the formula gives \\(M\\) based on known \\(T\\) and \\(r\\) . Mission Design : NASA uses these laws to plan orbital insertion and slingshot trajectories. 4. Computational Model We implement a Python simulation to verify this relationship numerically. Python Implementation: Kepler's Third Law Verification You can run the simulation in Google Colab by clicking the link below: \u25b6 Run in Google Colab 5. Visualizations and Interactive Tools Orbital Animation (circular motion using matplotlib.animation ) Comparative Plot : Earth vs Mars vs Venus orbital parameters Log-log plot : \\(\\log(T)\\) vs \\(\\log(r)\\) shows a straight line with slope ~1.5 6. Conclusion: From ancient planetary observations to modern spaceflight, Kepler\u2019s Third Law remains a pillar of gravitational physics. Its elegance lies in its simplicity, and its strength lies in its universality. This expanded analysis shows how classical physics still plays a vital role in understanding both our solar system and exoplanetary systems across the universe. References Kepler, J. (1609). Astronomia Nova Newton, I. (1687). Philosophi\u00e6 Naturalis Principia Mathematica Carroll & Ostlie (2017). An Introduction to Modern Astrophysics 7. Extended Scientific Discussion 7.1 Kepler\u2019s Law as a Consequence of Newtonian Gravity Kepler\u2019s Third Law is not just empirical\u2014it arises from Newton\u2019s Law of Universal Gravitation. The fact that \\(T^2 \\propto r^3\\) for circular orbits means that all mass dependence is encapsulated in the constant: \\[ k = \\frac{4\\pi^2}{G M} \\] This dependency makes it possible to infer the mass \\(M\\) of the central object (like a star or planet) purely by observing the orbital radius and period of a satellite. 7.2 Log-Log Analysis Taking the logarithm of both sides of Kepler\u2019s Third Law gives: \\[ \\log(T) = \\frac{3}{2} \\log(r) + \\log\\left(\\sqrt{\\frac{4\\pi^2}{G M}}\\right) \\] This shows that in a log-log plot, the slope of the line is always 1.5 \u2014 a hallmark of Keplerian motion. 8. Additional Practical Examples 8.1 Geostationary Orbit A geostationary satellite orbits Earth at the same rotational speed of the planet, so it appears fixed above a point on the equator. Required orbital period: \\(T = 86400\\) s (1 day) Solving for \\(r\\) : \\[ r = \\left( \\frac{G M T^2}{4\\pi^2} \\right)^{1/3} \\approx 4.22 \\times 10^7 \\, m \\] Which corresponds to approximately 35,786 km above Earth's surface. 8.2 Jupiter\u2019s Moons Galileo observed the four largest moons of Jupiter: Io, Europa, Ganymede, and Callisto. Their motion confirms Kepler\u2019s law with Jupiter as the central mass. Moon Orbital Radius (m) Period (s) Io \\(4.22 \\times 10^8\\) \\(1.53 \\times 10^5\\) Europa \\(6.71 \\times 10^8\\) \\(3.07 \\times 10^5\\) Ganymede \\(1.07 \\times 10^9\\) \\(6.19 \\times 10^5\\) Callisto \\(1.88 \\times 10^9\\) \\(1.44 \\times 10^6\\) Plotting \\(T^2\\) vs \\(r^3\\) for these moons confirms the \\(T^2 \\propto r^3\\) relationship. 9. Limitations and Extensions 9.1 Assumptions Assumes circular orbits (valid approximation for low-eccentricity orbits) Ignores relativistic corrections (important near massive stars or black holes) Two-body approximation (multi-body interactions ignored) 9.2 Extensions Elliptical orbits: replace \\(r\\) with semi-major axis \\(a\\) Add perturbation theory to account for gravitational influence of other bodies Use numerical integration for irregular systems (e.g. exoplanet systems with resonances) 10. Future Work Implement orbital simulation with matplotlib.animation Visualize elliptical orbits and perihelion shifts Add energy conservation checks: total energy should remain constant in closed systems","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius-exploring-keplers-third-law-and-beyond","text":"","title":"Orbital Period and Orbital Radius \u2013 Exploring Kepler\u2019s Third Law and Beyond"},{"location":"1%20Physics/2%20Gravity/Problem_1/#motivation","text":"The motion of celestial bodies is governed by a balance of gravitational attraction and inertial motion. One of the most powerful tools to analyze these motions is Kepler\u2019s Third Law , which links the orbital period of a body to its orbital radius. Originally derived from planetary observations, this law has since been grounded in Newtonian mechanics and generalized to all two-body orbital systems. Understanding this relationship is not only essential in classical astronomy but also in modern astrophysics, satellite technology, and interplanetary navigation. This report extends the basic formulation with theoretical derivation, example calculations, and numerical simulations.","title":"Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#11-newtonian-derivation-of-keplers-third-law","text":"In a circular orbit, the gravitational force between two bodies provides the required centripetal force: \\[ F_g = \\frac{G M m}{r^2}, \\quad F_c = m \\frac{v^2}{r} \\] Setting these equal: \\[ \\frac{G M m}{r^2} = m \\frac{v^2}{r} \\] Canceling terms and solving for velocity: \\[ v = \\sqrt{\\frac{G M}{r}} \\] Orbital period is the circumference divided by speed: \\[ T = \\frac{2\\pi r}{v} = 2\\pi \\sqrt{\\frac{r^3}{G M}} \\] Squaring both sides: \\[ T^2 = \\frac{4\\pi^2}{G M} r^3 \\] This is the generalized form of Kepler\u2019s Third Law .","title":"1.1 Newtonian Derivation of Kepler\u2019s Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#12-constants-and-units","text":"\\(G = 6.674 \\times 10^{-11} \\, m^3 kg^{-1} s^{-2}\\) \u2014 Gravitational constant \\(M\\) \u2014 Mass of the central body (e.g., Earth, Sun) \\(r\\) \u2014 Orbital radius from the center of the mass \\(T\\) \u2014 Orbital period \\(v\\) \u2014 Orbital velocity","title":"1.2 Constants and Units"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-practical-examples","text":"","title":"2. Practical Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#21-low-earth-orbit-satellite","text":"\\(M = 5.972 \\times 10^{24} \\, kg\\) (Earth) \\(r = 6.78 \\times 10^6 \\, m\\) (approx. Earth radius + 400 km) \\[ T = 2\\pi \\sqrt{\\frac{r^3}{G M}} \\approx 5.3 \\times 10^3 \\, s \\approx 88.3 \\, minutes \\]","title":"2.1 Low Earth Orbit Satellite"},{"location":"1%20Physics/2%20Gravity/Problem_1/#22-earth-around-the-sun","text":"\\(M = 1.989 \\times 10^{30} \\, kg\\) (Sun) \\(r = 1.496 \\times 10^{11} \\, m\\) (1 AU) \\[ T \\approx 2\\pi \\sqrt{\\frac{r^3}{G M}} \\approx 3.16 \\times 10^7 \\, s \\approx 365.25 \\, days \\]","title":"2.2 Earth Around the Sun"},{"location":"1%20Physics/2%20Gravity/Problem_1/#23-mars-orbiting-the-sun","text":"\\(r = 2.279 \\times 10^{11} \\, m\\) \\[ T_{\\text{Mars}} \\approx 687 \\, days \\]","title":"2.3 Mars Orbiting the Sun"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-scientific-implications","text":"Planet Detection : Observing a star\u2019s wobble or dimming gives \\(T\\) , inferring \\(r\\) using this law. Mass Estimation : Rearranging the formula gives \\(M\\) based on known \\(T\\) and \\(r\\) . Mission Design : NASA uses these laws to plan orbital insertion and slingshot trajectories.","title":"3. Scientific Implications"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-computational-model","text":"We implement a Python simulation to verify this relationship numerically.","title":"4. Computational Model"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-implementation-keplers-third-law-verification","text":"You can run the simulation in Google Colab by clicking the link below:","title":"Python Implementation: Kepler's Third Law Verification"},{"location":"1%20Physics/2%20Gravity/Problem_1/#run-in-google-colab","text":"","title":"\u25b6 Run in Google Colab"},{"location":"1%20Physics/2%20Gravity/Problem_1/#5-visualizations-and-interactive-tools","text":"Orbital Animation (circular motion using matplotlib.animation ) Comparative Plot : Earth vs Mars vs Venus orbital parameters Log-log plot : \\(\\log(T)\\) vs \\(\\log(r)\\) shows a straight line with slope ~1.5","title":"5. Visualizations and Interactive Tools"},{"location":"1%20Physics/2%20Gravity/Problem_1/#6-conclusion","text":"","title":"6. Conclusion:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#from-ancient-planetary-observations-to-modern-spaceflight-keplers-third-law-remains-a-pillar-of-gravitational-physics-its-elegance-lies-in-its-simplicity-and-its-strength-lies-in-its-universality-this-expanded-analysis-shows-how-classical-physics-still-plays-a-vital-role-in-understanding-both-our-solar-system-and-exoplanetary-systems-across-the-universe","text":"","title":"From ancient planetary observations to modern spaceflight, Kepler\u2019s Third Law remains a pillar of gravitational physics. Its elegance lies in its simplicity, and its strength lies in its universality. This expanded analysis shows how classical physics still plays a vital role in understanding both our solar system and exoplanetary systems across the universe."},{"location":"1%20Physics/2%20Gravity/Problem_1/#references","text":"Kepler, J. (1609). Astronomia Nova Newton, I. (1687). Philosophi\u00e6 Naturalis Principia Mathematica Carroll & Ostlie (2017). An Introduction to Modern Astrophysics","title":"References"},{"location":"1%20Physics/2%20Gravity/Problem_1/#7-extended-scientific-discussion","text":"","title":"7. Extended Scientific Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_1/#71-keplers-law-as-a-consequence-of-newtonian-gravity","text":"Kepler\u2019s Third Law is not just empirical\u2014it arises from Newton\u2019s Law of Universal Gravitation. The fact that \\(T^2 \\propto r^3\\) for circular orbits means that all mass dependence is encapsulated in the constant: \\[ k = \\frac{4\\pi^2}{G M} \\] This dependency makes it possible to infer the mass \\(M\\) of the central object (like a star or planet) purely by observing the orbital radius and period of a satellite.","title":"7.1 Kepler\u2019s Law as a Consequence of Newtonian Gravity"},{"location":"1%20Physics/2%20Gravity/Problem_1/#72-log-log-analysis","text":"Taking the logarithm of both sides of Kepler\u2019s Third Law gives: \\[ \\log(T) = \\frac{3}{2} \\log(r) + \\log\\left(\\sqrt{\\frac{4\\pi^2}{G M}}\\right) \\] This shows that in a log-log plot, the slope of the line is always 1.5 \u2014 a hallmark of Keplerian motion.","title":"7.2 Log-Log Analysis"},{"location":"1%20Physics/2%20Gravity/Problem_1/#8-additional-practical-examples","text":"","title":"8. Additional Practical Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#81-geostationary-orbit","text":"A geostationary satellite orbits Earth at the same rotational speed of the planet, so it appears fixed above a point on the equator. Required orbital period: \\(T = 86400\\) s (1 day) Solving for \\(r\\) : \\[ r = \\left( \\frac{G M T^2}{4\\pi^2} \\right)^{1/3} \\approx 4.22 \\times 10^7 \\, m \\] Which corresponds to approximately 35,786 km above Earth's surface.","title":"8.1 Geostationary Orbit"},{"location":"1%20Physics/2%20Gravity/Problem_1/#82-jupiters-moons","text":"Galileo observed the four largest moons of Jupiter: Io, Europa, Ganymede, and Callisto. Their motion confirms Kepler\u2019s law with Jupiter as the central mass. Moon Orbital Radius (m) Period (s) Io \\(4.22 \\times 10^8\\) \\(1.53 \\times 10^5\\) Europa \\(6.71 \\times 10^8\\) \\(3.07 \\times 10^5\\) Ganymede \\(1.07 \\times 10^9\\) \\(6.19 \\times 10^5\\) Callisto \\(1.88 \\times 10^9\\) \\(1.44 \\times 10^6\\) Plotting \\(T^2\\) vs \\(r^3\\) for these moons confirms the \\(T^2 \\propto r^3\\) relationship.","title":"8.2 Jupiter\u2019s Moons"},{"location":"1%20Physics/2%20Gravity/Problem_1/#9-limitations-and-extensions","text":"","title":"9. Limitations and Extensions"},{"location":"1%20Physics/2%20Gravity/Problem_1/#91-assumptions","text":"Assumes circular orbits (valid approximation for low-eccentricity orbits) Ignores relativistic corrections (important near massive stars or black holes) Two-body approximation (multi-body interactions ignored)","title":"9.1 Assumptions"},{"location":"1%20Physics/2%20Gravity/Problem_1/#92-extensions","text":"Elliptical orbits: replace \\(r\\) with semi-major axis \\(a\\) Add perturbation theory to account for gravitational influence of other bodies Use numerical integration for irregular systems (e.g. exoplanet systems with resonances)","title":"9.2 Extensions"},{"location":"1%20Physics/2%20Gravity/Problem_1/#10-future-work","text":"Implement orbital simulation with matplotlib.animation Visualize elliptical orbits and perihelion shifts Add energy conservation checks: total energy should remain constant in closed systems","title":"10. Future Work"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}